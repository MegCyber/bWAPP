package com.project.test;
import com.project.util.AlertPage;
import com.project.util.LandingPage;
import com.project.util.LoginPage;
import io.cucumber.java.en.*;
import org.junit.Assert;
import org.openqa.selenium.WebDriver;

public class StepDefinitionExploit {
    private WebDriver driver = StepDefAll.getDriver();
    private LoginPage loginPage;
    private LandingPage landingPage;
    private AlertPage alertPage;

    @Given("the user is on the bWAPP login page {string}")
    public void the_user_is_on_the_b_wapp_login_page(String url) throws InterruptedException {
            driver.get(url);
            Thread.sleep(2000);
            loginPage = new LoginPage(driver);
    }

    @When("they enter the following valid username: {string} and password: {string}")
    public void theyEnterTheFollowingValidUsernameAndPassword(String username, String password) {
        loginPage.enterDetails(username, password);
    }

    @When("they click the login button")
    public void they_click_the_login_button() throws InterruptedException {
        loginPage.clickLogin();
        Thread.sleep(2000);
    }

    @Then("they should be redirected to the bWAPP dashboard")
    public void they_should_be_redirected_to_the_b_wapp_dashboard() {
        landingPage = new LandingPage(driver);
        Assert.assertTrue(landingPage.isLandingPageDisplayed());
    }

    @When("they select the {string} option")
    public void theySelectTheOption(String exploit) throws InterruptedException {
        landingPage.selectExploit(exploit);
        Thread.sleep(2000);
    }

    @And("they enter the login {string} and password {string}")
    public void theyEnterTheLoginAndPassword(String arg0, String arg1) throws InterruptedException {
        landingPage.exploitSQL(arg0, arg1);
    }

    @Then("the SQL injection message should be displayed, indicating successful exploitation of the vulnerability")
    public void theSQLInjectionMessageShouldBeDisplayedIndicatingSuccessfulExploitationOfTheVulnerability() {
       Assert.assertTrue(landingPage.isSQLMessageDisplayed());
    }

    @And("they enter the payload: {string}")
    public void theyEnterThePayload(String payload) throws InterruptedException {
        landingPage.exploitHTML(payload);
        Thread.sleep(2000);
    }
    @Then("the HTML injection message should be displayed containing {string}, demonstrating successful exploitation of the vulnerability")
    public void theHTMLInjectionMessageShouldBeDisplayedContainingDemonstratingSuccessfulExploitationOfTheVulnerability(String message) {
        Assert.assertEquals(message, landingPage.HTMLMessageDisplayed());
    }
    @And("they enter the xss payload: {string}")
    public void theyEnterTheXssPayload(String payload) throws InterruptedException {
        landingPage.exploitXSS(payload);
    }

    @Then("a pop-up message should be displayed containing the message {string}, confirming successful exploitation of the XSS vulnerability")
    public void aPopUpMessageShouldBeDisplayedContainingTheMessageConfirmingSuccessfulExploitationOfTheXSSVulnerability(String arg0) throws InterruptedException {
            alertPage = new AlertPage(driver);
            alertPage.confirmAlertMessage();
    }
}
